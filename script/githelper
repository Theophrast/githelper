#!/bin/bash

########################################################
#
#                     Git initializer
#                        githelper
#
#       automaticatically initialize a new git repo
#         in a git root folder with a given name
#
#                       Theophrast
#                       2018.07.26
#
#  If you want to run this script from everywhere,
#  make it runnable then you can move or copy it to
#  /usr/bin folder.
#
#                   For more info visit:
#         https://github.com/Theophrast/githelper
#
##########################################################


#EDIT THESE PARAMETERS BEFORE USE

#IP address of your git server, use static ip
GIT_SERVER_IP_ADDRESS='192.168.0.128'

#your git repositories base url, this will contain subfolders
GIT_REPO_BASE_DIRECTORY='/home/git/git-root'

#your git repositories info will be written in this file
GIT_REPOS_INFO_FILE='/home/git/GIT_REPOSITORIES_INFO.txt'

#default subfolder, if you choose private there will be
# a folder with your name
GIT_REPO_DEFAULT_SUBFOLDER='shared'



#DO NOT EDIT PARAMETERS BELOW THIS LINE
#--------------------------------------------------------
SCRIPT_VERSION="0.1"
SCRIPT_NAME="githelper"
git_subfolder=$GIT_REPO_DEFAULT_SUBFOLDER


findcpu(){
	grep 'model name' /proc/cpuinfo  | uniq | awk -F':' '{ print $2}'
}

findkernelversion(){
	uname -mrs
}

totalmem(){
	grep -i 'memtotal' /proc/meminfo | awk -F':' '{ print $2}'
}

storagestat(){
	git_device=$( df $GIT_REPO_BASE_DIRECTORY | awk '/^\/dev/ {print $1}' )
	df -h | grep $git_device
}

ask_for_repo_name(){
	echo 'What will be the name of the git repository? (without .git extension)'
	read gitreponame

	if [[ -z "$gitreponame" ]]; then
	   printf '%s\n' "Enter a valid name"
	   ask_for_repo_name
	fi
	echo
}

ask_private_repo(){
	echo ''
	read -r -p 'Is it a private repo? [y/N]' response
	if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
	then
		git_subfolder=$USER
	fi
}

check_for_git(){
command -v git >/dev/null 2>&1 || { echo >&2 "Git is required for this script, but it's not installed.  Aborting."; exit 1; }
}



check_for_exist(){
	if [ -d "$created_repo_url" ]; then
	  echo 'Repository already exist!!!'
	  echo 'Change your repository name or delete existing repository manually.'
	  exit 1
	fi
}


confirm_repo_name(){
	read -r -p 'Initializing a new repo with name: '$gitreponame'.git ? [y/N]' response
	if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
	then
    	echo 'Init repository...'
	else
    	init_new_repo
	fi
}

check_for_access_repo_and_create(){
	if [ ! -d "$GIT_REPO_BASE_DIRECTORY" ]; then
		echo 'First start...'
		echo 'Trying to create directory: ' $GIT_REPO_BASE_DIRECTORY
		
		if mkdir -p $GIT_REPO_BASE_DIRECTORY ; then
     	 	
			echo'Directory created succesfully'
			echo''
  		 else
			echo''
      		echo 'Cannot access to git root directory  '$GIT_REPO_BASE_DIRECTORY
      		echo 'Do you have permission to write this folder?'
      		exit 1
   		fi
	
	fi
}

write_infos_on_start(){
  echo '----------------------------------------------------------------------'
	echo
	echo '                    Git initalizer               '
	echo
	echo
	echo "    CPU Type : $(findcpu)"
	echo "    Kernel version : $(findkernelversion)"
	echo "    Total memory : $(totalmem)"
	echo "    Storage status: $(storagestat)"
	echo
	echo "    Git directory root url: "
	echo "    $GIT_REPO_BASE_DIRECTORY/"
	echo
	echo '----------------------------------------------------------------------'
	echo
}

list_available_repositories(){
echo ''
echo 'List of repositories in directory:  '$GIT_REPO_BASE_DIRECTORY
echo '  '

cd $GIT_REPO_BASE_DIRECTORY


for f in *; do
    if [ -d ${f} ]; then
         echo ' '$f
         echo '  '
	   
	   
	   # if subdirectory exist
		cd $f
		for gitfolder in *; do
         	if [ -d ${gitfolder} ]; then
        	# Will not run if no directories are available
			echo '    '$gitfolder
         echo '       '$USER'@'$GIT_SERVER_IP_ADDRESS':'$(pwd)'/'$gitfolder
         echo '    '
    		fi
		done
		cd ..
    fi
	echo '  '
done

}

show_version(){
echo $SCRIPT_VERSION
}

show_usage(){
echo 'usage: '$SCRIPT_NAME' [-i | --init]  [-l | --list]  [-c | --config | --configuration]'
echo '                  [-h | --help]  [-v | --version] '
}

show_options(){
echo 'parameters:'
echo ''
echo '    -i, --init                   init a new repository via wizard'
echo ''
echo '    -l, --list                   list available git repositories with ssh url'
echo '    -c, --configuration          show current configuration'
echo ''
echo '    -h, --help                   show help'
echo '    -v, --version                show version information'
echo ''
echo 'Full documentation:  <https://github.com/Theophrast/githelper/>'
}


show_help(){
show_usage
echo ''
show_options
}

show_unknown_option(){
echo 'Unknown option: '$1
echo ''
show_help
}

show_configuration(){
echo ''
echo '   GIT_SERVER_IP_ADDRESS:       '$GIT_SERVER_IP_ADDRESS
echo '   GIT_REPO_BASE_DIRECTORY:     '$GIT_REPO_BASE_DIRECTORY
echo '   GIT_REPOS_INFO_FILE:         '$GIT_REPOS_INFO_FILE
echo '   GIT_REPO_DEFAULT_SUBFOLDER:  '$GIT_REPO_DEFAULT_SUBFOLDER
echo ''
}


check_dependencies(){
	check_for_git
	if (( $EUID == 0 )); then
			echo "Do not run this script as root!!!"
			echo "If you cannot acces to git base directory, make it writeable"
			echo "     chmod 777 -R <directory>"
			echo ""
			exit 1
		fi
}

init_new_repo(){
   clear
   check_for_access_repo_and_create
   write_infos_on_start
   ask_for_repo_name
   confirm_repo_name
   ask_private_repo
	created_repo_url=$GIT_REPO_BASE_DIRECTORY'/'$git_subfolder'/'$gitreponame'.git'
	
	check_for_exist
	
   echo
   echo 'Creating directory ' $created_repo_url
   
   if mkdir -p $created_repo_url ; then
      echo 'Directory created'
   else
      echo 'Cannot create directory  '$created_repo_url
      echo 'Do you have permission to write this folder?'
      exit 1
   fi
   
   echo
   echo 'Init repository'
   cd $created_repo_url
   git init --bare

   echo 'New repository succesfully created'
   echo
   echo '-----'
   echo
   echo 'Remote address:'
   echo
   echo '   '$USER'@'$GIT_SERVER_IP_ADDRESS':'$created_repo_url
   echo
   echo '-----'
   echo
   echo 'To init on your client:'
   echo
   echo '     git init'
   echo '     echo "message" >> README.md'
   echo '     git add README.md'
   echo '     git commit -m "initial commit"'
   echo '     git remote add origin '$USER'@'$GIT_SERVER_IP_ADDRESS':'$created_repo_url
   echo '     git push -u origin master'
   echo
	echo '----------------------------------------------------------------------'
	
	log_repo_data_to_log_file
	exit 0
}

write_header_to_file(){
	echo "##################################################" >> $GIT_REPOS_INFO_FILE
	echo "#                                                #" >> $GIT_REPOS_INFO_FILE
	echo "#               GIT REPOSITORIES                 #" >> $GIT_REPOS_INFO_FILE
	echo "#                                                #" >> $GIT_REPOS_INFO_FILE
	echo "#       initiated by githelper script            #" >> $GIT_REPOS_INFO_FILE
	echo "#                                                #" >> $GIT_REPOS_INFO_FILE
	echo "#                                                #" >> $GIT_REPOS_INFO_FILE
	echo "##################################################" >> $GIT_REPOS_INFO_FILE
	
	echo "" >> $GIT_REPOS_INFO_FILE
	echo "" >> $GIT_REPOS_INFO_FILE
	echo "--------------------------------------------------" >> $GIT_REPOS_INFO_FILE
}


log_repo_data_to_log_file(){
if [ ! -f "$GIT_REPOS_INFO_FILE" ]
then
	write_header_to_file
fi


	DATE=`date '+%Y-%m-%d %H:%M:%S'`
	echo "" >> $GIT_REPOS_INFO_FILE
	echo "  "$gitreponame".git">> $GIT_REPOS_INFO_FILE
	echo "" >> $GIT_REPOS_INFO_FILE
	echo "    created on: "$DATE  >> $GIT_REPOS_INFO_FILE
	echo "    created by: "$USER >> $GIT_REPOS_INFO_FILE
	echo "" >> $GIT_REPOS_INFO_FILE
	echo '    Remote address:'>> $GIT_REPOS_INFO_FILE
	echo "" >> $GIT_REPOS_INFO_FILE
	echo '    '$USER'@'$GIT_SERVER_IP_ADDRESS':'$created_repo_url>> $GIT_REPOS_INFO_FILE
	echo "" >> $GIT_REPOS_INFO_FILE
	echo "--------------------------------------------------" >> $GIT_REPOS_INFO_FILE
}


check_dependencies

while [ "$1" != "" ]; do
    case $1 in
        -i | --i | -init | --init )           init_new_repo
                                exit
                                ;;
        -l | --l | -list | --list )           list_available_repositories
                                exit
                                ;;
        -c | --c | -config | --config | -configuration | --configuration )   show_configuration
                                exit
                                ;;
        -v | --v | -version | --version )           show_version
                                exit
                                ;;
        -h | --h | -help | --help )           show_help
                                exit
                                ;;
        * )                     show_unknown_option $1
                                exit 1
    esac
    shift
done


